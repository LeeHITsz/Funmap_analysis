import numpy as np
import matplotlib.pyplot as plt


labels = ['Funmap', 'CARMA', 'PAINTOR']
data_HDL = np.array([[202, 198, 198],
                     [177, 431, 912]])

data_LDL = np.array([[133, 122, 145],
                     [70, 184, 367]])

data_TG = np.array([[162, 185, 188],
                    [189, 418, 780]])

data_TC = np.array([[150, 159, 176],
                    [75, 234, 417]])

set_HDL = np.array([[45, 42, 39],
                    [334, 587, 1071]])

set_LDL = np.array([[34, 27, 29],
                    [169, 279, 483]])

set_TG = np.array([[65, 56, 47],
                   [286, 547, 921]])

set_TC = np.array([[32, 25, 22],
                   [193, 368, 571]])

percentages_HDL = 100 * data_HDL / data_HDL.sum(axis=0)
percentages_LDL = 100 * data_LDL / data_LDL.sum(axis=0)
percentages_TG = 100 * data_TG / data_TG.sum(axis=0)
percentages_TC = 100 * data_TC / data_TC.sum(axis=0)

perset_HDL = 100 * set_HDL / set_HDL.sum(axis=0)
perset_LDL = 100 * set_LDL / set_LDL.sum(axis=0)
perset_TG = 100 * set_TG / set_TG.sum(axis=0)
perset_TC = 100 * set_TC / set_TC.sum(axis=0)


plt.figure(figsize=(6, 12))
plt.subplot(411)
plt.barh([0, 0.8, 1.6], percentages_HDL[0], left=np.array([0, 0, 0]), color='#E2533D', edgecolor='#E2533D', height=0.3, label='SNPs replicated by without-UKB GWAS')
plt.barh([0, 0.8, 1.6], percentages_HDL[1], left=percentages_HDL[0], color='#459CD7', edgecolor='#459CD7', height=0.3, label='SNPs not replicated by without-UKB GWAS')
plt.barh([0.3, 1.1, 1.9], perset_HDL[0], left=np.array([0, 0, 0]), color='#E2533D', edgecolor='white', height=0.3, label='SNPs in Trans-ancestry credible sets', hatch='/')
plt.barh([0.3, 1.1, 1.9], perset_HDL[1], left=perset_HDL[0], color='#459CD7', edgecolor='white', height=0.3, label='SNPs out of Trans-ancestry credible sets', hatch='/')
plt.text(percentages_HDL[0, 0] / 2, 0, str(data_HDL[0, 0]), va='center', fontweight='bold')
plt.text(percentages_HDL[0, 0] + percentages_HDL[1, 0] / 2, 0, str(data_HDL[1, 0]), va='center', fontweight='bold')
plt.text(percentages_HDL[0, 1] / 2, 0.8, str(data_HDL[0, 1]), va='center', fontweight='bold')
plt.text(percentages_HDL[0, 1] + percentages_HDL[1, 1] / 2, 0.8, str(data_HDL[1, 1]), va='center', fontweight='bold')
plt.text(percentages_HDL[0, 2] / 2, 1.6, str(data_HDL[0, 2]), va='center', fontweight='bold')
plt.text(percentages_HDL[0, 2] + percentages_HDL[1, 2] / 2, 1.6, str(data_HDL[1, 2]), va='center', fontweight='bold')
plt.text(4, 0.3, str(set_HDL[0, 0]), va='center', fontweight='bold')
plt.text(perset_HDL[0, 0] + perset_HDL[1, 0] / 2, 0.3, str(set_HDL[1, 0]), va='center', fontweight='bold')
plt.text(1, 1.1, str(set_HDL[0, 1]), va='center', fontweight='bold')
plt.text(perset_HDL[0, 1] + perset_HDL[1, 1] / 2, 1.1, str(set_HDL[1, 1]), va='center', fontweight='bold')
plt.text(0.4, 1.9, str(set_HDL[0, 2]), va='center', fontweight='bold')
plt.text(perset_HDL[0, 2] + perset_HDL[1, 2] / 2, 1.9, str(set_HDL[1, 2]), va='center', fontweight='bold')
plt.yticks([0.15, 0.95, 1.75], ['Funmap', 'CARMA', 'PAINTOR'])
plt.xlabel('Number of SNPs')
plt.ylabel('Methods')
plt.title('HDL', fontsize=14, fontweight="bold")
plt.gca().invert_yaxis()
plt.xlim(0, 100)
plt.xticks([0, 25, 50, 75, 100], ['0%', '25%', '50%', '75%', '100%'])
plt.gca().spines['right'].set_visible(False)
plt.gca().spines['top'].set_visible(False)
plt.gca().spines['left'].set_visible(False)
plt.gca().spines['bottom'].set_visible(False)

plt.subplot(412)
plt.barh([0, 0.8, 1.6], percentages_LDL[0], left=np.array([0, 0, 0]), color='#E2533D', edgecolor='#E2533D', height=0.3, label='SNPs replicated by without-UKB GWAS')
plt.barh([0, 0.8, 1.6], percentages_LDL[1], left=percentages_LDL[0], color='#459CD7', edgecolor='#459CD7', height=0.3, label='SNPs not replicated by without-UKB GWAS')
plt.barh([0.3, 1.1, 1.9], perset_LDL[0], left=np.array([0, 0, 0]), color='#E2533D', edgecolor='white', height=0.3, label='SNPs in Trans-ancestry credible sets', hatch='/')
plt.barh([0.3, 1.1, 1.9], perset_LDL[1], left=perset_LDL[0], color='#459CD7', edgecolor='white', height=0.3, label='SNPs out of Trans-ancestry credible sets', hatch='/')
plt.text(percentages_LDL[0, 0] / 2, 0, str(data_LDL[0, 0]), va='center', fontweight='bold')
plt.text(percentages_LDL[0, 0] + percentages_LDL[1, 0] / 2, 0, str(data_LDL[1, 0]), va='center', fontweight='bold')
plt.text(percentages_LDL[0, 1] / 2, 0.8, str(data_LDL[0, 1]), va='center', fontweight='bold')
plt.text(percentages_LDL[0, 1] + percentages_LDL[1, 1] / 2, 0.8, str(data_LDL[1, 1]), va='center', fontweight='bold')
plt.text(percentages_LDL[0, 2] / 2, 1.6, str(data_LDL[0, 2]), va='center', fontweight='bold')
plt.text(percentages_LDL[0, 2] + percentages_LDL[1, 2] / 2, 1.6, str(data_LDL[1, 2]), va='center', fontweight='bold')
plt.text(5, 0.3, str(set_LDL[0, 0]), va='center', fontweight='bold')
plt.text(perset_LDL[0, 0] + perset_LDL[1, 0] / 2, 0.3, str(set_LDL[1, 0]), va='center', fontweight='bold')
plt.text(1.5, 1.1, str(set_LDL[0, 1]), va='center', fontweight='bold')
plt.text(perset_LDL[0, 1] + perset_LDL[1, 1] / 2, 1.1, str(set_LDL[1, 1]), va='center', fontweight='bold')
plt.text(1, 1.9, str(set_LDL[0, 2]), va='center', fontweight='bold')
plt.text(perset_LDL[0, 2] + perset_LDL[1, 2] / 2, 1.9, str(set_LDL[1, 2]), va='center', fontweight='bold')
plt.yticks([0.15, 0.95, 1.75], ['Funmap', 'CARMA', 'PAINTOR'])
plt.xlabel('Number of SNPs')
plt.ylabel('Methods')
plt.title('LDL', fontsize=14, fontweight="bold")
plt.gca().invert_yaxis()
plt.xlim(0, 100)
plt.xticks([0, 25, 50, 75, 100], ['0%', '25%', '50%', '75%', '100%'])
plt.gca().spines['right'].set_visible(False)
plt.gca().spines['top'].set_visible(False)
plt.gca().spines['left'].set_visible(False)
plt.gca().spines['bottom'].set_visible(False)

plt.subplot(413)
plt.barh([0, 0.8, 1.6], percentages_TG[0], left=np.array([0, 0, 0]), color='#E2533D', edgecolor='#E2533D', height=0.3, label='P-value$<5\\times10^{-8}$ in replication GWAS')
plt.barh([0, 0.8, 1.6], percentages_TG[1], left=percentages_TG[0], color='#459CD7', edgecolor='#459CD7', height=0.3, label='P-value$>5\\times10^{-8}$ in replication GWAS')
plt.barh([0.3, 1.1, 1.9], perset_TG[0], left=np.array([0, 0, 0]), color='#E2533D', edgecolor='white', height=0.3, label='SNPs in Trans-ancestry credible sets', hatch='/')
plt.barh([0.3, 1.1, 1.9], perset_TG[1], left=perset_TG[0], color='#459CD7', edgecolor='white', height=0.3, label='SNPs out of Trans-ancestry credible sets', hatch='/')
plt.text(percentages_TG[0, 0] / 2, 0, str(data_TG[0, 0]), va='center', fontweight='bold')
plt.text(percentages_TG[0, 0] + percentages_TG[1, 0] / 2, 0, str(data_TG[1, 0]), va='center', fontweight='bold')
plt.text(percentages_TG[0, 1] / 2, 0.8, str(data_TG[0, 1]), va='center', fontweight='bold')
plt.text(percentages_TG[0, 1] + percentages_TG[1, 1] / 2, 0.8, str(data_TG[1, 1]), va='center', fontweight='bold')
plt.text(percentages_TG[0, 2] / 2, 1.6, str(data_TG[0, 2]), va='center', fontweight='bold')
plt.text(percentages_TG[0, 2] + percentages_TG[1, 2] / 2, 1.6, str(data_TG[1, 2]), va='center', fontweight='bold')
plt.text(6, 0.3, str(set_TG[0, 0]), va='center', fontweight='bold')
plt.text(perset_TG[0, 0] + perset_TG[1, 0] / 2, 0.3, str(set_TG[1, 0]), va='center', fontweight='bold')
plt.text(1, 1.1, str(set_TG[0, 1]), va='center', fontweight='bold')
plt.text(perset_TG[0, 1] + perset_TG[1, 1] / 2, 1.1, str(set_TG[1, 1]), va='center', fontweight='bold')
plt.text(1, 1.9, str(set_TG[0, 2]), va='center', fontweight='bold')
plt.text(perset_TG[0, 2] + perset_TG[1, 2] / 2, 1.9, str(set_TG[1, 2]), va='center', fontweight='bold')
plt.yticks([0.15, 0.95, 1.75], ['Funmap', 'CARMA', 'PAINTOR'])
plt.xlabel('Number of SNPs')
plt.ylabel('Methods')
plt.title('TG', fontsize=14, fontweight="bold")
plt.gca().invert_yaxis()
plt.xlim(0, 100)
plt.xticks([0, 25, 50, 75, 100], ['0%', '25%', '50%', '75%', '100%'])
plt.gca().spines['right'].set_visible(False)
plt.gca().spines['top'].set_visible(False)
plt.gca().spines['left'].set_visible(False)
plt.gca().spines['bottom'].set_visible(False)

plt.subplot(414)
plt.barh([0, 0.8, 1.6], percentages_TC[0], left=np.array([0, 0, 0]), color='#E2533D', edgecolor='#E2533D', height=0.3, label='SNPs replicated by without-UKB GWAS')
plt.barh([0, 0.8, 1.6], percentages_TC[1], left=percentages_TC[0], color='#459CD7', edgecolor='#459CD7', height=0.3, label='SNPs not replicated by without-UKB GWAS')
plt.barh([0.3, 1.1, 1.9], perset_TC[0], left=np.array([0, 0, 0]), color='#E2533D', edgecolor='white', height=0.3, label='SNPs in Trans-ancestry credible sets', hatch='/')
plt.barh([0.3, 1.1, 1.9], perset_TC[1], left=perset_TC[0], color='#459CD7', edgecolor='white', height=0.3, label='SNPs out of Trans-ancestry credible sets', hatch='/')
plt.text(percentages_TC[0, 0] / 2, 0, str(data_TC[0, 0]), va='center', fontweight='bold')
plt.text(percentages_TC[0, 0] + percentages_TC[1, 0] / 2, 0, str(data_TC[1, 0]), va='center', fontweight='bold')
plt.text(percentages_TC[0, 1] / 2, 0.8, str(data_TC[0, 1]), va='center', fontweight='bold')
plt.text(percentages_TC[0, 1] + percentages_TC[1, 1] / 2, 0.8, str(data_TC[1, 1]), va='center', fontweight='bold')
plt.text(percentages_TC[0, 2] / 2, 1.6, str(data_TC[0, 2]), va='center', fontweight='bold')
plt.text(percentages_TC[0, 2] + percentages_TC[1, 2] / 2, 1.6, str(data_TC[1, 2]), va='center', fontweight='bold')
plt.text(4, 0.3, str(set_TC[0, 0]), va='center', fontweight='bold')
plt.text(perset_TC[0, 0] + perset_TC[1, 0] / 2, 0.3, str(set_TC[1, 0]), va='center', fontweight='bold')
plt.text(1, 1.1, str(set_TC[0, 1]), va='center', fontweight='bold')
plt.text(perset_TC[0, 1] + perset_TC[1, 1] / 2, 1.1, str(set_TC[1, 1]), va='center', fontweight='bold')
plt.text(0.4, 1.9, str(set_TC[0, 2]), va='center', fontweight='bold')
plt.text(perset_TC[0, 2] + perset_TC[1, 2] / 2, 1.9, str(set_TC[1, 2]), va='center', fontweight='bold')
plt.xlabel('Number of SNPs')
plt.yticks([0.15, 0.95, 1.75], ['Funmap', 'CARMA', 'PAINTOR'])
plt.ylabel('Methods')
plt.title('TC', fontsize=14, fontweight="bold")
plt.gca().invert_yaxis()
plt.xlim(0, 100)
plt.xticks([0, 25, 50, 75, 100], ['0%', '25%', '50%', '75%', '100%'])
plt.gca().spines['right'].set_visible(False)
plt.gca().spines['top'].set_visible(False)
plt.gca().spines['left'].set_visible(False)
plt.gca().spines['bottom'].set_visible(False)
plt.legend(bbox_to_anchor=(0.88, -0.28), ncol=1)

plt.subplots_adjust(left=0.16, right=0.96, bottom=0.13, top=0.96, wspace=0.10, hspace=0.5)
plt.savefig('5.pdf')
# plt.show()
